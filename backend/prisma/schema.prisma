// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum KpiType {
  NUMERIC
  PERCENTAGE
  CURRENCY
  BOOLEAN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(EMPLOYEE)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  employeeProjects EmployeeProject[]
  managedProjects  Project[] @relation("ProjectManager")
  createdProjects  Project[] @relation("ProjectCreator")
  createdKpis      Kpi[]     @relation("KpiCreator")
  kpiValues        KpiValue[]

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime?
  endDate     DateTime?
  budget      Decimal?      @db.Decimal(10, 2)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  managerId String
  manager   User @relation("ProjectManager", fields: [managerId], references: [id])
  
  creatorId String
  creator   User @relation("ProjectCreator", fields: [creatorId], references: [id])
  
  employees EmployeeProject[]
  kpis      Kpi[]

  @@map("projects")
}

model EmployeeProject {
  id         String   @id @default(cuid())
  userId     String
  projectId  String
  role       String?
  startDate  DateTime @default(now())
  endDate    DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("employee_projects")
}

model Kpi {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        KpiType  @default(NUMERIC)
  target      Decimal? @db.Decimal(10, 2)
  unit        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creatorId String
  creator   User @relation("KpiCreator", fields: [creatorId], references: [id])
  
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  
  values KpiValue[]

  @@map("kpis")
}

model KpiValue {
  id        String   @id @default(cuid())
  value     Decimal  @db.Decimal(10, 2)
  date      DateTime @default(now())
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  kpiId String
  kpi   Kpi @relation(fields: [kpiId], references: [id], onDelete: Cascade)
  
  userId String
  user   User @relation(fields: [userId], references: [id])

  @@map("kpi_values")
}
